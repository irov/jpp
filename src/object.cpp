#include "jpp/object.hpp"

#include "jansson.h"

namespace jpp
{
    //////////////////////////////////////////////////////////////////////////
    object::object()
        : m_object(nullptr)
    {
    }
    //////////////////////////////////////////////////////////////////////////
    object::~object()
    {
        json_decref(m_object);
    }
    //////////////////////////////////////////////////////////////////////////
    object::object(nullptr_t)
        : object()
    {
    }
    //////////////////////////////////////////////////////////////////////////
    object::object(json_t* _object)
        : m_object(_object)
    {
        json_incref(m_object);
    }
    //////////////////////////////////////////////////////////////////////////
    object::object( json_t* _object, borrowed_t )
        : m_object( _object )
    {
    }
    //////////////////////////////////////////////////////////////////////////
    object::object(const object& _object)
        : object(_object.ptr())
    {
    }
    //////////////////////////////////////////////////////////////////////////
    object::object(object&& _object)
        : m_object(_object.ptr())
    {
        _object.reset();
    }
    //////////////////////////////////////////////////////////////////////////
    json_t* object::ptr() const
    {
        return m_object;
    }
    //////////////////////////////////////////////////////////////////////////
    void object::reset()
    {
        m_object = nullptr;
    }
    //////////////////////////////////////////////////////////////////////////
    object::operator bool() const
    {
        return json_is_true(m_object);
    }
    //////////////////////////////////////////////////////////////////////////
    object::operator int32_t() const
    {
        return (int32_t)json_integer_value(m_object);
    }
    //////////////////////////////////////////////////////////////////////////
    object::operator uint32_t() const
    {
        return (uint32_t)json_integer_value(m_object);
    }
    //////////////////////////////////////////////////////////////////////////
    object::operator float() const
    {
        return (float)json_real_value(m_object);
    }
    //////////////////////////////////////////////////////////////////////////
    object::operator double() const
    {
        return (double)json_real_value(m_object);
    }
    //////////////////////////////////////////////////////////////////////////
    object::operator const char* () const
    {
        return json_string_value(m_object);
    }
    //////////////////////////////////////////////////////////////////////////
    object object::operator [] ( const char* _name ) const
    {
        json_t * j = json_object_get( m_object, _name );

        return object( j, borrowed_t() );
    }
}
